<!doctype html>
<html>
<head>
    <title>Behavior Logging Service</title>
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
    <style>
        body {
            word-wrap:break-word;
        }
        .axis .domain {
            display: none;
        }
        #start_date_container, #end_date_container {
            padding-left: 50px;
        }
    </style>
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
</head>
<body>
<div class="container">
    <div class="page-header text-center">
        <h1><span class="fa fa-eye"></span> Behavior Logging Service</h1>
        <h1><span class="fa fa-anchor"></span> Data Visualization</h1>
        <div class="row">
            <div class="col-xs-6">
                <a href="/profile" class="btn btn-primary">Profile</a>
            </div>
            <div class="col-xs-6">
                <a href="/logout" class="btn btn-warning btn-sm">Logout</a>
            </div>
        </div>
    </div>

    <div class="text-center"><strong>Select Start and End dates to visualize actions performed in the selected date range.</strong></div>
    <br>

    <div class="row">
        <div class="col-xs-4" id="start_date_container">
            <label for="start_date">Start Date</label>
            <div class="form-group row">
                <div class="col-xs-8">
                    <input type="date" id="start_date" class="form-control">
                </div>
            </div>
        </div>
        <div class="col-xs-4" id="end_date_container">
            <label for="end_date">End Date</label>
            <div class="form-group row">
                <div class="col-xs-8">
                    <input type="date" id="end_date" class="form-control">
                </div>
            </div>
        </div>
        <div class="col-xs-4">
            <a class="btn btn-primary" id="update_graphs">Update Graphs</a>
        </div>
    </div>

    <div class="well">
        <div id="bar_chart"></div>
        <br>
        <p class="text-center" id="bar_text"></p>
    </div>
    <div class="well" >
        <div id="bubble_chart"></div>
        <p class="text-center" id="bubble_text"></p>
    </div>

    <script>
        $(document).ready(function() {
            var startDate = null;
            var endDate = null;

            $("#update_graphs").click(function() {
                startDate = new Date($("#start_date").val());
                startDate.setTime(startDate.getTime() + startDate.getTimezoneOffset() * 60 * 1000);
                endDate = new Date($("#end_date").val());
                endDate.setTime(endDate.getTime() + endDate.getTimezoneOffset() * 60 * 1000);

                var user = <%- JSON.stringify(user) %>;
                var users = <%- JSON.stringify(users) %>;

                var filteredActions = user.local.actionData.filter(function(item) {
                    var itemDate = new Date(item.date);
                    return (startDate <= itemDate && itemDate <= endDate);
                });

                var actionTags = ["question_click", "star", "share_question", "upvote_on_question", "downvote_on_question",
                                  "share_answer", "upvote_on_answer", "downvote_on_answer", "tag_click"];

                var userActionCount = actionTags.map(function(tag) {
                    return getActionCount(filteredActions, tag);
                });
                var avgActionCount = Array.apply(null, new Array(actionTags.length)).map(Number.prototype.valueOf, 0);
                var userCount = 0.0;

                users.forEach(function(user) {
                    if (user.local.email) {
                        var filteredActions = user.local.actionData.filter(function(item) {
                            var itemDate = new Date(item.date);
                            return (startDate <= itemDate && itemDate <= endDate);
                        });
                        for (var i = 0; i < actionTags.length; i++) {
                            avgActionCount[i] += getActionCount(filteredActions, actionTags[i]);
                        }
                        userCount += 1.0;
                    }
                });

                avgActionCount = avgActionCount.map(function(total) {
                    return total / userCount;
                });

                var barData = "Action,Current User,Avg of All Users\n" +
                              "Quest Clicks," + userActionCount[0] + "," + avgActionCount[0] + "\n" +
                              "Quest Stars," + userActionCount[1] + "," + avgActionCount[1] + "\n" +
                              "Quest Shares," + userActionCount[2] + "," + avgActionCount[2] + "\n" +
                              "Quest Upvotes," + userActionCount[3] + "," + avgActionCount[3] + "\n" +
                              "Quest Downvotes," + userActionCount[4] + "," + avgActionCount[4] + "\n" +
                              "Ans Shares," + userActionCount[5] + "," + avgActionCount[5] + "\n" +
                              "Ans Upvotes," + userActionCount[6] + "," + avgActionCount[6] + "\n" +
                              "Ans Downvotes," + userActionCount[7] + "," + avgActionCount[7] + "\n" +
                              "Tags Clicks," + userActionCount[8] + "," + avgActionCount[8];

                var wordDict = {};

                getActions(filteredActions, "tag_click").forEach(function(item) {
                    var arr = item.content.split("/");
                    var tag = arr[arr.length - 1];
                    if (tag in wordDict) {
                        wordDict[tag] += 1;
                    } else {
                        wordDict[tag] = 1;
                    }
                });

                new Set(getActions(filteredActions, "scroll").map(function(item) {
                    return item.content;
                })).forEach(function(question) {
                    var arr = question.split("/");
                    arr[arr.length - 1].split("-").filter(function(word) {
                        return word.length > 3;
                    }).forEach(function(tag) {
                        if (tag in wordDict) {
                            wordDict[tag] += 1;
                        } else {
                            wordDict[tag] = 1;
                        }
                    });
                });

                var bubbleData = "id,value";
                for (var word in wordDict) {
                    if (wordDict[word] > 1) {
                        bubbleData += "\n" + word + "," + wordDict[word];
                    }
                }

                displayBarChart(barData);
                $("#bar_text").text("The above chart shows various actions performed by the user relative to all other users for the selected date range.");

                displayBubbleChart(bubbleData);
                $("#bubble_text").text("The above chart displays tags and words most frequently used by the user in the selected date range.");
            });
        });

        function getActions(filteredActions, type) {
            return filteredActions.filter(function(item) {
                return item.type == type;
            });
        };

        function getActionCount(filteredActions, type) {
            return getActions(filteredActions, type).length;
        };

        function displayBarChart(csvData) {
            d3.selectAll("#bar_chart > *").remove();

            var margin = {top: 20, right: 20, bottom: 30, left: 100},
                width = 1000 - margin.left - margin.right,
                height = 500 - margin.top - margin.bottom;

            var barChart = d3.select("#bar_chart")
                .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)

            var g = barChart.append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            var x0 = d3.scaleBand()
                .rangeRound([0, width])
                .paddingInner(0.1);

            var x1 = d3.scaleBand()
                .padding(0.05);

            var y = d3.scaleLinear()
                .rangeRound([height, 0]);

            var z = d3.scaleOrdinal()
                .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

            var data = d3.csvParse(csvData, function(d, i, columns) {
              for (var i = 1, n = columns.length; i < n; ++i) d[columns[i]] = +d[columns[i]];
              return d;
            });

            var keys = data.columns.slice(1);

            x0.domain(data.map(function(d) { return d.Action; }));
            x1.domain(keys).rangeRound([0, x0.bandwidth()]);
            y.domain([0, d3.max(data, function(d) { return d3.max(keys, function(key) { return d[key]; }); })]).nice();

            g.append("g")
              .selectAll("g")
              .data(data)
              .enter().append("g")
                .attr("transform", function(d) { return "translate(" + x0(d.Action) + ",0)"; })
              .selectAll("rect")
              .data(function(d) { return keys.map(function(key) { return {key: key, value: d[key]}; }); })
              .enter().append("rect")
                .attr("x", function(d) { return x1(d.key); })
                .attr("y", function(d) { return y(d.value); })
                .attr("width", x1.bandwidth())
                .attr("height", function(d) { return height - y(d.value); })
                .attr("fill", function(d) { return z(d.key); });

            g.append("g")
                .attr("class", "axis")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x0));

            g.append("g")
                .attr("class", "axis")
                .call(d3.axisLeft(y).ticks(null, "s"))
              .append("text")
                .attr("x", 2)
                .attr("y", y(y.ticks().pop()) - 15)
                .attr("dy", "0.32em")
                .attr("fill", "#000")
                .attr("font-weight", "bold")
                .attr("text-anchor", "end")
                .text("Action Count");

            var legend = g.append("g")
                .attr("font-family", "sans-serif")
                .attr("font-size", 10)
                .attr("text-anchor", "end")
              .selectAll("g")
              .data(keys.slice().reverse())
              .enter().append("g")
                .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

            legend.append("rect")
                .attr("x", width)
                .attr("y", -19)
                .attr("width", 19)
                .attr("height", 19)
                .attr("fill", z);

            legend.append("text")
                .attr("x", width - 5)
                .attr("y", -10.5)
                .attr("dy", "0.32em")
                .text(function(d) { return d; });
        }

        function displayBubbleChart(csvData) {
            d3.selectAll("#bubble_chart > *").remove();

            var margin = {top: 30, right: 20, bottom: 30, left: 20},
                width = 1200 - margin.left - margin.right,
                height = 500 - margin.top - margin.bottom;

            var bubbleChart = d3.select("#bubble_chart")
                .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .attr("font-family", "sans-serif")
                    .attr("font-size", 13)
                    .attr("text-anchor", "middle")

            var format = d3.format(",d");

            var color = d3.scaleOrdinal(d3.schemeCategory20c);

            var pack = d3.pack()
              .size([width, height])
              .padding(1.5);

            var classes = d3.csvParse(csvData, function(d) {
                d.value = +d.value;
                if (d.value) return d;
            });

            var root = d3.hierarchy({children: classes})
                .sum(function(d) { return d.value; })
                .each(function(d) {
                  if (id = d.data.id) {
                    var id, i = id.lastIndexOf(".");
                    d.id = id;
                    d.package = id.slice(0, i);
                    d.class = id.slice(i + 1);
                  }
                });

            var node = bubbleChart.selectAll(".node")
              .data(pack(root).leaves())
              .enter().append("g")
                .attr("class", "node")
                .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

            node.append("circle")
                .attr("id", function(d) { return d.id; })
                .attr("r", function(d) { return d.r; })
                .style("fill", function(d) { return color(d.package); });

            node.append("clipPath")
                .attr("id", function(d) { return "clip-" + d.id; })
              .append("use")
                .attr("xlink:href", function(d) { return "#" + d.id; });

            node.append("text")
                .attr("clip-path", function(d) { return "url(#clip-" + d.id + ")"; })
              .selectAll("tspan")
              .data(function(d) { return d.class.split(/(?=[A-Z][^A-Z])/g); })
              .enter().append("tspan")
                .attr("x", 0)
                .attr("y", function(d, i, nodes) { return 13 + (i - nodes.length / 2 - 0.5) * 10; })
                .text(function(d) { return d; });

            node.append("title")
                .text(function(d) { return d.id + "\n" + format(d.value); });
        }
    </script>

    <div class="well">
        <!-- <strong>Why do you decide to log these actions?</strong>
        <ol>
            <li>
                <strong>Questions Clicked</strong>:
                These could be used to identify the types of questions the user might be interested in.
            </li>
            <li>
                <strong>Tags Clicked</strong>:
                These can help us identify broader collections of questions / specific topics that the user might be interested in.
            </li>
            <li>
                <strong>Questions Starred / Un-starred</strong>:
                These can give us further and a much stronger indication of the user's interest in a paticular question / topic.
            </li>
            <li>
                <strong>Content Shared</strong>:
                The content shared by the user is another strong indicator of interest and could be used to suggest similar content.
            </li>
            <li>
                <strong>UpVotes and DownVotes</strong>:
                These can help us determine the user's activity levels and also the performance of the content presented on our site.
            </li>
            <li>
                <strong>Scrolling</strong>:
                This can help us analyze the user's behaviour by logging how long and how deep the user is scrolling.
            </li>
        </ol> -->
    </div>

</div>
</body>
</html>
